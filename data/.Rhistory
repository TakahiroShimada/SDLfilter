#cat(rep("#", maxchar), sep="")
cat("\n\n")
#### Return the filtered data set
return(sdata)
}
turtle.ddfilter<-ddfilter(turtle.dupfilter, vmax=vmax, maxvlp = maxvlp)
depthfilter<-function(sdata, bathymetry, extract="bilinear", tide, qi=4, depth=0, tidal.plane, filter=TRUE) {
OriginalSS<-nrow(sdata)
### Sort data in alphabetical and chronological order
# Animal data
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
# tidal data
tide<-with(tide, tide[order(standard.port, tideDT),])
row.names(tide)<-1:nrow(tide)
# tidal plane
tidal.plane<-with(tidal.plane, tidal.plane[order(standard.port, secondary.port),])
row.names(tidal.plane)<-1:nrow(tidal.plane)
### Set lat and lon as "SpatialPoints"
# Animal data
LatLong<-data.frame(Y=sdata$lat, X=sdata$lon)
coordinates(LatLong)<-~X+Y
proj4string(LatLong)<-CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# tidal data
LatLong.tide<-data.frame(Y=tidal.plane$lat, X=tidal.plane$lon)
coordinates(LatLong.tide)<-~X+Y
proj4string(LatLong.tide)<-CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
### extract bathymetry at each animal location
sdata$bathy<-extract(bathymetry, LatLong, method=extract)
### Find the nearest tidal station for each animal location
# Get nearest tidal ports
distance.to.ports<-pointDistance(LatLong, LatLong.tide, lonlat=T)
if(nrow(tidal.plane)==1){
np.index<-1
} else {
np.index<-apply(distance.to.ports, 1, which.min)
}
sdata$nearest.port<-tidal.plane[np.index, "secondary.port"]
np.list<-levels(factor(sdata$nearest.port))
# Get the names of standard ports associated to the nearest ports
s.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
sdata$standard.port<-tidal.plane[s.index, "standard.port"]
### Subset tidal data according to the range of animal data
sp.list<-levels(factor(sdata$standard.port))
tide<-tide[tide$standard.port %in% sp.list,]
trimTide<-function(j){
MaxInterval<-max(diff(tide[tide$standard.port %in% j, "tideDT"]))
units(MaxInterval)<-"mins"
minDateTime<-min(sdata[sdata$standard.port %in% j, "DateTime"])-MaxInterval
maxDateTime<-max(sdata[sdata$standard.port %in% j, "DateTime"])+MaxInterval
with(tide, tide[tideDT>=minDateTime & tideDT<=maxDateTime & standard.port %in% j,])
}
tide.list<-lapply(sp.list, trimTide)
tide<-do.call(rbind, lapply(tide.list, data.frame, stringsAsFactors=FALSE))
### Organize tidal data
# Calculate difference in tide to a subsequent record
tide$range<-unlist(tapply(tide$reading, tide$standard.port, function(x) c(diff(x),NA)))
# Calculate tidal height increment per minute
Interval<-unlist(tapply(tide$tideDT, tide$standard.port, function(x) c(as.numeric(diff(x)),NA)))
tide$increment<-tide$range/Interval
## Estimate tide at secondary ports
GetTideSP<-function(j){
pri.port<-with(tidal.plane, tidal.plane[secondary.port %in% j, "standard.port"])
sec.port<-with(tidal.plane, tidal.plane[secondary.port %in% j, "secondary.port"])
tide.sub<-tide[tide$standard.port %in% pri.port,]
timeDiff <- with(tidal.plane[tidal.plane$secondary.port %in% sec.port,], timeDiff)
tide.sub$tideDT <- tide.sub$tideDT+timeDiff*60
tide.sub$secondary.port<-sec.port
tide.sub
}
tideS.list<-lapply(np.list, GetTideSP)
tide.s<-do.call(rbind, lapply(tideS.list, data.frame, stringsAsFactors=FALSE))
#### Estimate water depth with the tide accounted for
### Actual water depth
# Estimate tidal height at each location
tide.s$tideDT1<-tide.s$tideDT
sdata$DateTime1<-sdata$DateTime
tidalHeight<-function(j){
## Make data tables
tide.dt<-data.table(tide.s[tide.s$secondary.port %in% j,], key="tideDT1")
sdata.dt<-data.table(sdata[sdata$nearest.port %in% j,], key="DateTime1")
## Get the differences in time between each location and tidal reading at secondary ports
estTide<-tide.dt[sdata.dt, list(DateTime, tideDT, reading, increment), roll="nearest"]
estTide$gap.time<-with(estTide, as.numeric(difftime(tideDT, DateTime, units = "mins")))
## Estimate tidal adjustment for each location
sdata.dt$adj.reading<-with(estTide, reading+increment*gap.time)
as.data.frame(sdata.dt)
}
sdataDT.list<-lapply(np.list, tidalHeight)
sdata<-do.call(rbind, lapply(sdataDT.list, data.frame, stringsAsFactors=FALSE))
# Estimate actual depth of each location with tide effect
d.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
adj.datum<-tidal.plane[d.index, "datumDiff"]
sdata$depth.exp<-with(sdata, bathy+adj.datum-adj.reading)
if(filter %in% TRUE){
### Water depth at closest high tide
## Organize tidal data
#Estimate high tide at each port: (0=High, 1=others)
peakTide<-function(j){
tide.temp<-tide.s[tide.s$secondary.port %in% j,]
Interval<-as.numeric(with(tide.temp, difftime(tide.temp[2, "tideDT"], tide.temp[1, "tideDT"], units="mins")))
ncell.lookup<-120/Interval
find.peakHL<-function(i) {
if(tide.temp$reading[i]>=max(tide.temp$reading[(i+1):(i+ncell.lookup)]) & tide.temp$reading[i]>=max(tide.temp$reading[(i-1):(i-ncell.lookup)])){
0
} else {
1
}
}
peak<-unlist(lapply(ncell.lookup:(nrow(tide.temp)-ncell.lookup-1), find.peakHL))
tide.temp$peak<-c(rep(NA, ncell.lookup-1), peak, rep(NA, ncell.lookup+1))
tide.temp[tide.temp$peak == 0,]
}
tide.s<-with(tide.s, tide.s[order(secondary.port, tideDT),])
row.names(tide.s)<-1:nrow(tide.s)
peakTide.list<-lapply(np.list, peakTide)
Htide<-do.call(rbind, lapply(peakTide.list, data.frame, stringsAsFactors=FALSE))
Htide<-Htide[!(is.na(Htide$reading)),]
## Estimate height of high tide at each turtle location
HtideHeight<-function(j){
Htide.dt<-data.table(Htide[Htide$secondary.port %in% j,], key="tideDT1")
sdata.dt<-data.table(sdata[sdata$nearest.port %in% j,], key="DateTime1")
estHtide<-Htide.dt[sdata.dt, list(DateTime, tideDT, reading, increment), roll="nearest"]
estHtide$adj.reading<-with(estHtide, reading)
sdata.dt$adj.reading.HT<-estHtide$adj.reading
as.data.frame(sdata.dt)
}
sdataHTH.list<-lapply(np.list, HtideHeight)
sdata<-do.call(rbind, lapply(sdataHTH.list, data.frame, stringsAsFactors=FALSE))
## Estimate actual depth of a location at the nearest high tide
d.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
adj.datum<-tidal.plane[d.index, "datumDiff"]
sdata$depth.HT<-with(sdata, bathy+adj.datum-adj.reading.HT)
### Remove locations according to water depth at high tide: (0 = remove, 1 = keep)
sdata<-with(sdata, sdata[!(qi<=qi & depth.HT>depth),])
#### Re-order data
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
#### Report the summary of filtering
FilteredSS<-nrow(sdata)
RemovedSamplesN<-OriginalSS-FilteredSS
RemovedSamplesP<-round((1-(FilteredSS/OriginalSS))*100,2)
DepthEst<-nrow(sdata[!(is.na(sdata$depth.exp)),])
cat("\n")
cat("Input data:", OriginalSS, "locations")
cat("\n")
cat("Filtered data:", FilteredSS, "locations")
cat("\n")
cat("depthfilter removed ", RemovedSamplesN, " locations (", RemovedSamplesP, "% of original data)", sep="")
cat("\n")
cat("Actual water depth (bathymetry + tide height) was estiamted for", DepthEst, "of", OriginalSS, "locations")
cat("\n\n")
#### Delete working columns and return the output
drops<-c("nearest.port", "bathy", "standard.port", "adj.reading", "adj.reading.HT", "DateTime1")
sdata<-sdata[,!(names(sdata) %in% drops)]
return(sdata)
} else {
#### Re-order data
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
#### Report the summary of filtering
DepthEst<-nrow(sdata[!(is.na(sdata$depth.exp)),])
cat("\n")
cat("No location was removed by depthfilter (i.e. filter option was desabled)")
cat("\n")
cat("Actual water depth (bathymetry + tide height) was estiamted for", DepthEst, "of", OriginalSS, "locations")
cat("\n\n")
#### Delete working columns and return the output
drops<-c("nearest.port", "bathy", "standard.port", "adj.reading", "DateTime1")
sdata<-sdata[,!(names(sdata) %in% drops)]
return(sdata)
}
}
load("bathymodel")
setwd('/media/generic/System/Users/jc207418/My Documents/My Files/Uni/JCU/Research/Subjects/SDLfilter/Working folder/SDLfilter/data')
load("bathymodel.RData")
load("tidalplane.rda")
load("tidedata.rda")
turtle.dupfilter<-dupfilter(turtle)
vmax<-est.vmax(turtle.dupfilter)
## Estimate maxvlp
maxvlp<-est.maxvlp(turtle.dupfilter)
## Apply ddfilter
turtle.ddfilter<-ddfilter(turtle.dupfilter, vmax=vmax, maxvlp = maxvlp)
turtle.depthfilter<-depthfilter(sdata=turtle.ddfilter, bathymetry=bathymodel, extract="bilinear", tide=tidedata, qi=4, depth=0, tidal.plane=tidalplane, filter=TRUE)
bathymodel@file@name
bathymodel@file@name<-"bathymetry_model"
turtle.depthfilter<-depthfilter(sdata=turtle.ddfilter, bathymetry=bathymodel, extract="bilinear", tide=tidedata, qi=4, depth=0, tidal.plane=tidalplane, filter=TRUE)
plot(bathymodel)
load("bathymodel.RData")
plot(bathymodel)
install.packages("/media/generic/System/Users/jc207418/My Documents/My Files/Uni/JCU/Research/Subjects/SDLfilter/Windows/SDLfilter_0.3.1-2.tar.gz", repos = NULL, type = "source")
data(bathymodel)
require(SDLfilter)
data(bathymodel)
plot(bathymodel)
data(tidalplane)
head(tidalplane)
setwd('/media/generic/System/Users/jc207418/My Documents/My Files/Uni/JCU/Research/Subjects/SDLfilter/Working folder/SDLfilter/data')
load("bathymodel.RData")
plot(bathymodel)
turtle.depthfilter<-depthfilter(sdata=turtle.ddfilter, bathymetry=bathymodel, extract="bilinear", tide=tidedata, qi=4, depth=0, tidal.plane=tidalplane, filter=TRUE)
summary(turtle.depthfilter)
tail(turtle.depthfilter)
turtle.depthfilter<-depthfilter(sdata=turtle.dupfilter, bathymetry=bathymodel, extract="bilinear", tide=tidedata, qi=4, depth=0, tidal.plane=tidalplane, filter=TRUE)
tail(turtle.depthfilter)
extract="bilinear"
qi=4
depth=0
sdata=turtle.dupfilter
bathymetry=bathymodel
tide=tidedata
qi=4
tidal.plane=tidalplane
filter=TRUE
OriginalSS<-nrow(sdata)
head(sdata)
tail(sdata)
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
tide<-with(tide, tide[order(standard.port, tideDT),])
row.names(tide)<-1:nrow(tide)
tidal.plane<-with(tidal.plane, tidal.plane[order(standard.port, secondary.port),])
row.names(tidal.plane)<-1:nrow(tidal.plane)
LatLong<-data.frame(Y=sdata$lat, X=sdata$lon)
coordinates(LatLong)<-~X+Y
proj4string(LatLong)<-CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
LatLong.tide<-data.frame(Y=tidal.plane$lat, X=tidal.plane$lon)
coordinates(LatLong.tide)<-~X+Y
proj4string(LatLong.tide)<-CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
sdata$bathy<-extract(bathymetry, LatLong, method=extract)
### Find the nearest tidal station for each animal location
# Get nearest tidal ports
distance.to.ports<-pointDistance(LatLong, LatLong.tide, lonlat=T)
if(nrow(tidal.plane)==1){
np.index<-1
} else {
np.index<-apply(distance.to.ports, 1, which.min)
}
sdata$nearest.port<-tidal.plane[np.index, "secondary.port"]
np.list<-levels(factor(sdata$nearest.port))
# Get the names of standard ports associated to the nearest ports
s.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
sdata$standard.port<-tidal.plane[s.index, "standard.port"]
### Subset tidal data according to the range of animal data
sp.list<-levels(factor(sdata$standard.port))
tide<-tide[tide$standard.port %in% sp.list,]
trimTide<-function(j){
MaxInterval<-max(diff(tide[tide$standard.port %in% j, "tideDT"]))
units(MaxInterval)<-"mins"
minDateTime<-min(sdata[sdata$standard.port %in% j, "DateTime"])-MaxInterval
maxDateTime<-max(sdata[sdata$standard.port %in% j, "DateTime"])+MaxInterval
with(tide, tide[tideDT>=minDateTime & tideDT<=maxDateTime & standard.port %in% j,])
}
tide.list<-lapply(sp.list, trimTide)
tide<-do.call(rbind, lapply(tide.list, data.frame, stringsAsFactors=FALSE))
### Organize tidal data
# Calculate difference in tide to a subsequent record
tide$range<-unlist(tapply(tide$reading, tide$standard.port, function(x) c(diff(x),NA)))
# Calculate tidal height increment per minute
Interval<-unlist(tapply(tide$tideDT, tide$standard.port, function(x) c(as.numeric(diff(x)),NA)))
tide$increment<-tide$range/Interval
## Estimate tide at secondary ports
GetTideSP<-function(j){
pri.port<-with(tidal.plane, tidal.plane[secondary.port %in% j, "standard.port"])
sec.port<-with(tidal.plane, tidal.plane[secondary.port %in% j, "secondary.port"])
tide.sub<-tide[tide$standard.port %in% pri.port,]
timeDiff <- with(tidal.plane[tidal.plane$secondary.port %in% sec.port,], timeDiff)
tide.sub$tideDT <- tide.sub$tideDT+timeDiff*60
tide.sub$secondary.port<-sec.port
tide.sub
}
tideS.list<-lapply(np.list, GetTideSP)
tide.s<-do.call(rbind, lapply(tideS.list, data.frame, stringsAsFactors=FALSE))
#### Estimate water depth with the tide accounted for
### Actual water depth
# Estimate tidal height at each location
tide.s$tideDT1<-tide.s$tideDT
sdata$DateTime1<-sdata$DateTime
tidalHeight<-function(j){
## Make data tables
tide.dt<-data.table(tide.s[tide.s$secondary.port %in% j,], key="tideDT1")
sdata.dt<-data.table(sdata[sdata$nearest.port %in% j,], key="DateTime1")
## Get the differences in time between each location and tidal reading at secondary ports
estTide<-tide.dt[sdata.dt, list(DateTime, tideDT, reading, increment), roll="nearest"]
estTide$gap.time<-with(estTide, as.numeric(difftime(tideDT, DateTime, units = "mins")))
## Estimate tidal adjustment for each location
sdata.dt$adj.reading<-with(estTide, reading+increment*gap.time)
as.data.frame(sdata.dt)
}
sdataDT.list<-lapply(np.list, tidalHeight)
sdata<-do.call(rbind, lapply(sdataDT.list, data.frame, stringsAsFactors=FALSE))
# Estimate actual depth of each location with tide effect
d.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
adj.datum<-tidal.plane[d.index, "datumDiff"]
sdata$depth.exp<-with(sdata, bathy+adj.datum-adj.reading)
filter %in% TRUE
peakTide<-function(j){
tide.temp<-tide.s[tide.s$secondary.port %in% j,]
Interval<-as.numeric(with(tide.temp, difftime(tide.temp[2, "tideDT"], tide.temp[1, "tideDT"], units="mins")))
ncell.lookup<-120/Interval
find.peakHL<-function(i) {
if(tide.temp$reading[i]>=max(tide.temp$reading[(i+1):(i+ncell.lookup)]) & tide.temp$reading[i]>=max(tide.temp$reading[(i-1):(i-ncell.lookup)])){
0
} else {
1
}
}
peak<-unlist(lapply(ncell.lookup:(nrow(tide.temp)-ncell.lookup-1), find.peakHL))
tide.temp$peak<-c(rep(NA, ncell.lookup-1), peak, rep(NA, ncell.lookup+1))
tide.temp[tide.temp$peak == 0,]
}
tide.s<-with(tide.s, tide.s[order(secondary.port, tideDT),])
row.names(tide.s)<-1:nrow(tide.s)
peakTide.list<-lapply(np.list, peakTide)
Htide<-do.call(rbind, lapply(peakTide.list, data.frame, stringsAsFactors=FALSE))
Htide<-Htide[!(is.na(Htide$reading)),]
## Estimate height of high tide at each turtle location
HtideHeight<-function(j){
Htide.dt<-data.table(Htide[Htide$secondary.port %in% j,], key="tideDT1")
sdata.dt<-data.table(sdata[sdata$nearest.port %in% j,], key="DateTime1")
estHtide<-Htide.dt[sdata.dt, list(DateTime, tideDT, reading, increment), roll="nearest"]
estHtide$adj.reading<-with(estHtide, reading)
sdata.dt$adj.reading.HT<-estHtide$adj.reading
as.data.frame(sdata.dt)
}
sdataHTH.list<-lapply(np.list, HtideHeight)
sdata<-do.call(rbind, lapply(sdataHTH.list, data.frame, stringsAsFactors=FALSE))
## Estimate actual depth of a location at the nearest high tide
d.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
adj.datum<-tidal.plane[d.index, "datumDiff"]
sdata$depth.HT<-with(sdata, bathy+adj.datum-adj.reading.HT)
### Remove locations according to water depth at high tide: (0 = remove, 1 = keep)
sdata<-with(sdata, sdata[!(qi<=qi & depth.HT>depth),])
#### Re-order data
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
head(sdata)
tail(sdata)
sdata<-with(sdata, sdata[complete.cases(lat),])
tail(sdata)
depthfilter<-function(sdata, bathymetry, extract="bilinear", tide, qi=4, depth=0, tidal.plane, filter=TRUE) {
OriginalSS<-nrow(sdata)
### Sort data in alphabetical and chronological order
# Animal data
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
# tidal data
tide<-with(tide, tide[order(standard.port, tideDT),])
row.names(tide)<-1:nrow(tide)
# tidal plane
tidal.plane<-with(tidal.plane, tidal.plane[order(standard.port, secondary.port),])
row.names(tidal.plane)<-1:nrow(tidal.plane)
### Set lat and lon as "SpatialPoints"
# Animal data
LatLong<-data.frame(Y=sdata$lat, X=sdata$lon)
coordinates(LatLong)<-~X+Y
proj4string(LatLong)<-CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# tidal data
LatLong.tide<-data.frame(Y=tidal.plane$lat, X=tidal.plane$lon)
coordinates(LatLong.tide)<-~X+Y
proj4string(LatLong.tide)<-CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
### extract bathymetry at each animal location
sdata$bathy<-extract(bathymetry, LatLong, method=extract)
### Find the nearest tidal station for each animal location
# Get nearest tidal ports
distance.to.ports<-pointDistance(LatLong, LatLong.tide, lonlat=T)
if(nrow(tidal.plane)==1){
np.index<-1
} else {
np.index<-apply(distance.to.ports, 1, which.min)
}
sdata$nearest.port<-tidal.plane[np.index, "secondary.port"]
np.list<-levels(factor(sdata$nearest.port))
# Get the names of standard ports associated to the nearest ports
s.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
sdata$standard.port<-tidal.plane[s.index, "standard.port"]
### Subset tidal data according to the range of animal data
sp.list<-levels(factor(sdata$standard.port))
tide<-tide[tide$standard.port %in% sp.list,]
trimTide<-function(j){
MaxInterval<-max(diff(tide[tide$standard.port %in% j, "tideDT"]))
units(MaxInterval)<-"mins"
minDateTime<-min(sdata[sdata$standard.port %in% j, "DateTime"])-MaxInterval
maxDateTime<-max(sdata[sdata$standard.port %in% j, "DateTime"])+MaxInterval
with(tide, tide[tideDT>=minDateTime & tideDT<=maxDateTime & standard.port %in% j,])
}
tide.list<-lapply(sp.list, trimTide)
tide<-do.call(rbind, lapply(tide.list, data.frame, stringsAsFactors=FALSE))
### Organize tidal data
# Calculate difference in tide to a subsequent record
tide$range<-unlist(tapply(tide$reading, tide$standard.port, function(x) c(diff(x),NA)))
# Calculate tidal height increment per minute
Interval<-unlist(tapply(tide$tideDT, tide$standard.port, function(x) c(as.numeric(diff(x)),NA)))
tide$increment<-tide$range/Interval
## Estimate tide at secondary ports
GetTideSP<-function(j){
pri.port<-with(tidal.plane, tidal.plane[secondary.port %in% j, "standard.port"])
sec.port<-with(tidal.plane, tidal.plane[secondary.port %in% j, "secondary.port"])
tide.sub<-tide[tide$standard.port %in% pri.port,]
timeDiff <- with(tidal.plane[tidal.plane$secondary.port %in% sec.port,], timeDiff)
tide.sub$tideDT <- tide.sub$tideDT+timeDiff*60
tide.sub$secondary.port<-sec.port
tide.sub
}
tideS.list<-lapply(np.list, GetTideSP)
tide.s<-do.call(rbind, lapply(tideS.list, data.frame, stringsAsFactors=FALSE))
#### Estimate water depth with the tide accounted for
### Actual water depth
# Estimate tidal height at each location
tide.s$tideDT1<-tide.s$tideDT
sdata$DateTime1<-sdata$DateTime
tidalHeight<-function(j){
## Make data tables
tide.dt<-data.table(tide.s[tide.s$secondary.port %in% j,], key="tideDT1")
sdata.dt<-data.table(sdata[sdata$nearest.port %in% j,], key="DateTime1")
## Get the differences in time between each location and tidal reading at secondary ports
estTide<-tide.dt[sdata.dt, list(DateTime, tideDT, reading, increment), roll="nearest"]
estTide$gap.time<-with(estTide, as.numeric(difftime(tideDT, DateTime, units = "mins")))
## Estimate tidal adjustment for each location
sdata.dt$adj.reading<-with(estTide, reading+increment*gap.time)
as.data.frame(sdata.dt)
}
sdataDT.list<-lapply(np.list, tidalHeight)
sdata<-do.call(rbind, lapply(sdataDT.list, data.frame, stringsAsFactors=FALSE))
# Estimate actual depth of each location with tide effect
d.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
adj.datum<-tidal.plane[d.index, "datumDiff"]
sdata$depth.exp<-with(sdata, bathy+adj.datum-adj.reading)
if(filter %in% TRUE){
### Water depth at closest high tide
## Organize tidal data
#Estimate high tide at each port: (0=High, 1=others)
peakTide<-function(j){
tide.temp<-tide.s[tide.s$secondary.port %in% j,]
Interval<-as.numeric(with(tide.temp, difftime(tide.temp[2, "tideDT"], tide.temp[1, "tideDT"], units="mins")))
ncell.lookup<-120/Interval
find.peakHL<-function(i) {
if(tide.temp$reading[i]>=max(tide.temp$reading[(i+1):(i+ncell.lookup)]) & tide.temp$reading[i]>=max(tide.temp$reading[(i-1):(i-ncell.lookup)])){
0
} else {
1
}
}
peak<-unlist(lapply(ncell.lookup:(nrow(tide.temp)-ncell.lookup-1), find.peakHL))
tide.temp$peak<-c(rep(NA, ncell.lookup-1), peak, rep(NA, ncell.lookup+1))
tide.temp[tide.temp$peak == 0,]
}
tide.s<-with(tide.s, tide.s[order(secondary.port, tideDT),])
row.names(tide.s)<-1:nrow(tide.s)
peakTide.list<-lapply(np.list, peakTide)
Htide<-do.call(rbind, lapply(peakTide.list, data.frame, stringsAsFactors=FALSE))
Htide<-Htide[!(is.na(Htide$reading)),]
## Estimate height of high tide at each turtle location
HtideHeight<-function(j){
Htide.dt<-data.table(Htide[Htide$secondary.port %in% j,], key="tideDT1")
sdata.dt<-data.table(sdata[sdata$nearest.port %in% j,], key="DateTime1")
estHtide<-Htide.dt[sdata.dt, list(DateTime, tideDT, reading, increment), roll="nearest"]
estHtide$adj.reading<-with(estHtide, reading)
sdata.dt$adj.reading.HT<-estHtide$adj.reading
as.data.frame(sdata.dt)
}
sdataHTH.list<-lapply(np.list, HtideHeight)
sdata<-do.call(rbind, lapply(sdataHTH.list, data.frame, stringsAsFactors=FALSE))
## Estimate actual depth of a location at the nearest high tide
d.index<-match(sdata$nearest.port, tidal.plane$secondary.port)
adj.datum<-tidal.plane[d.index, "datumDiff"]
sdata$depth.HT<-with(sdata, bathy+adj.datum-adj.reading.HT)
### Remove locations according to water depth at high tide: (0 = remove, 1 = keep)
sdata<-with(sdata, sdata[!(qi<=qi & depth.HT>depth),])
#### Re-order data
sdata<-with(sdata, sdata[complete.cases(lat),])
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
#### Report the summary of filtering
FilteredSS<-nrow(sdata)
RemovedSamplesN<-OriginalSS-FilteredSS
RemovedSamplesP<-round((1-(FilteredSS/OriginalSS))*100,2)
DepthEst<-nrow(sdata[!(is.na(sdata$depth.exp)),])
cat("\n")
cat("Input data:", OriginalSS, "locations")
cat("\n")
cat("Filtered data:", FilteredSS, "locations")
cat("\n")
cat("depthfilter removed ", RemovedSamplesN, " locations (", RemovedSamplesP, "% of original data)", sep="")
cat("\n")
cat("Actual water depth (bathymetry + tide height) was estiamted for", DepthEst, "of", OriginalSS, "locations")
cat("\n\n")
#### Delete working columns and return the output
drops<-c("nearest.port", "bathy", "standard.port", "adj.reading", "adj.reading.HT", "DateTime1")
sdata<-sdata[,!(names(sdata) %in% drops)]
return(sdata)
} else {
#### Re-order data
sdata<-with(sdata, sdata[order(id, DateTime),])
row.names(sdata)<-1:nrow(sdata)
#### Report the summary of filtering
DepthEst<-nrow(sdata[!(is.na(sdata$depth.exp)),])
cat("\n")
cat("No location was removed by depthfilter (i.e. filter option was desabled)")
cat("\n")
cat("Actual water depth (bathymetry + tide height) was estiamted for", DepthEst, "of", OriginalSS, "locations")
cat("\n\n")
#### Delete working columns and return the output
drops<-c("nearest.port", "bathy", "standard.port", "adj.reading", "DateTime1")
sdata<-sdata[,!(names(sdata) %in% drops)]
return(sdata)
}
}
turtle.depthfilter<-depthfilter(sdata=turtle.dupfilter, bathymetry=bathymodel, extract="bilinear", tide=tidedata, qi=4, depth=0, tidal.plane=tidalplane, filter=TRUE)
tail(turtle.depthfilter)
tidalplane
